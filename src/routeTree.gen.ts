/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const WomanLazyImport = createFileRoute('/woman')()
const OfficeLazyImport = createFileRoute('/office')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const WomanLazyRoute = WomanLazyImport.update({
  id: '/woman',
  path: '/woman',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/woman.lazy').then((d) => d.Route))

const OfficeLazyRoute = OfficeLazyImport.update({
  id: '/office',
  path: '/office',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/office.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/office': {
      id: '/office'
      path: '/office'
      fullPath: '/office'
      preLoaderRoute: typeof OfficeLazyImport
      parentRoute: typeof rootRoute
    }
    '/woman': {
      id: '/woman'
      path: '/woman'
      fullPath: '/woman'
      preLoaderRoute: typeof WomanLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/office': typeof OfficeLazyRoute
  '/woman': typeof WomanLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/office': typeof OfficeLazyRoute
  '/woman': typeof WomanLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/office': typeof OfficeLazyRoute
  '/woman': typeof WomanLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/office' | '/woman'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/office' | '/woman'
  id: '__root__' | '/' | '/office' | '/woman'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  OfficeLazyRoute: typeof OfficeLazyRoute
  WomanLazyRoute: typeof WomanLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  OfficeLazyRoute: OfficeLazyRoute,
  WomanLazyRoute: WomanLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/office",
        "/woman"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/office": {
      "filePath": "office.lazy.tsx"
    },
    "/woman": {
      "filePath": "woman.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
